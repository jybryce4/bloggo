@page "/account/login"
@inject NavigationManager NavigationManager

<div id="login-form" class="container container-fluid">
    <div class="card">
        <h4 class="card-header">Login To Bloggo</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <button class="btn btn-primary">
                    @* @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    } *@
                    Login
                </button>
                <NavLink href="account/register" class="btn btn-link">Register</NavLink>
                <NavLink href="/" class="btn btn-link">Cancel</NavLink>
            </EditForm>
        </div>
    </div>
</div>


@code {
    //private bool loading;
    private Models.Login model = new Models.Login();
    private AlertService alertService = new AlertService();

    private void LoginUser()
    {
        //loading = true;
        IDatabaseService<User, User> db = new UserDatabaseService();

        string username = model.Username;
        string password = model.Password;

        string passwordHash = db.GetItem(username).PasswordHash;
        

        //AccountService accountService = new AccountService(db);

        // reset Alerts on submit
        //alertService.Clear();

        try
        {
            AccountService.Login(model, passwordHash, db);
            db.CloseConnection();
            NavigationManager.NavigateTo($"users/{username}/feed");
        }
        catch (Exception exception)
        {
            // loading = false;
            Console.WriteLine(exception.Message);
            db.CloseConnection();
            NavigationManager.NavigateTo("account/invalid-login");
            StateHasChanged();
        }
    }
}