@page "/users/{Username}"

<div class="container-fluid">
    <div class="row">
        <!-- Replace my images with generic ones and use the database URL fields -->
        <img src=@AsyncUtil.RunSync(() => GetUserCoverPic()) alt="profile cover image" class="cover-img rounded">
        <img src=@AsyncUtil.RunSync(() => GetUserProfilePic()) alt="profile picture" class="profile-img rounded rounded-circle">
    </div>
    <div class="row">
        <div class="col text-center">
            <h1 id="name">@(AsyncUtil.RunSync(() => GetUserFirstName())) @(AsyncUtil.RunSync(() => GetUserLastName()))
            </h1>
        </div>

        <div class="col-8 text-right">
            <h3>@@@Username</h3>
        </div>

    </div>
</div>
<hr>
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h3 class="text-center">Latest Posts</h3>
            @foreach (var post in (AsyncUtil.RunSync(() => UserPostList()).Reverse()))
            {
                <UserPost Username=@post.Username PostID=@post.PostID />
            }
        </div>

        <div id="profile-sections" class="col">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">
                        <h3>About Me</h3>
                    </div>
                    <hr>
                    <div class="card-text">
                        <p>@AsyncUtil.RunSync(() => GetUserBio())</p>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">
                        <h3>My Website</h3>
                    </div>
                    <hr>
                    <div class="card-text">
                        <p>@AsyncUtil.RunSync(() => GetUserWebsite())</p>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">
                        <h3>Users I follow</h3>
                    </div>
                    <div class="card-text">
                        <!-- To do -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string Username { get; set; }

    //private IDatabaseService<Profile, User, string> db = new ProfileDatabaseService();

    //private IDatabaseService<Models.Post, Models.Post, int> PostDB = new PostDatabaseService();

    async Task<string> ProfileUrl()
    {
        //await db.OpenConnection();

        string url = (await GetUser()).ProfileURL;

        //await db.CloseConnection();

        return url;
    }

    async Task<Profile> GetUser()
    {
        //await db.OpenConnection();

        Profile user = await AccountService.profileDatabaseService.GetItem(Username);

        //await db.CloseConnection();

        return user;
    }

    async Task<string> GetUserFirstName()
    {
        string firstName = (await GetUser()).FirstName;

        //await db.CloseConnection();

        return firstName;

    }

    async Task<string> GetUserLastName()
    {
        //await db.OpenConnection();

        string lastName = (await GetUser()).LastName;

        //await db.CloseConnection();

        return lastName;
    }

    async Task<string> GetUserCoverPic()
    {
        // await db.OpenConnection();

        string coverURL = (await GetUser()).CoverImageURL;

        //await db.CloseConnection();

        return coverURL;
    }

    async Task<string> GetUserProfilePic()
    {
        //await db.OpenConnection();

        string profileImgUrl = (await GetUser()).ProfileImageURL;

        //await db.CloseConnection();

        return profileImgUrl;
    }

    async Task<string> GetUserBio()
    {
        //await db.OpenConnection();

        string userBio = (await GetUser()).UserBio;

        //await db.CloseConnection();

        return userBio;
    }

    async Task<string> GetUserWebsite()
    {
        //await db.OpenConnection();

        string website = (await GetUser()).Website;

        //await db.CloseConnection();

        return website;
    }

    async Task<IList<Models.Post>> UserPostList()
    {
        //await PostDB.OpenConnection();

        var userPosts = await AccountService.postDatabaseService.GetAllRows(Username);

        //await PostDB.CloseConnection();

        return userPosts;
    }

}
